CREATE DATABASE `bank-management-system` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;



CREATE TABLE Admin (
    AdminID INT PRIMARY KEY AUTO_INCREMENT,   
    Username VARCHAR(50) UNIQUE NOT NULL,     
    Password VARCHAR(255) NOT NULL,             
  EmployeeID INT,
 FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);

-- 1. Customers Table
CREATE TABLE Customers (
    CustomerID BIGINT PRIMARY KEY,
    Password VARCHAR(50),
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Address VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(15),
    BranchID INT,
    FOREIGN KEY (BranchID) REFERENCES Branches(BranchID)
);

-- 2. Accounts Table
CREATE TABLE Accounts (
    AccountID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID BIGINT,
    AccountType VARCHAR(20),
    Balance DECIMAL(15, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE
);

-- 3. Transactions Table
CREATE TABLE Transactions (
    TransactionID INT AUTO_INCREMENT PRIMARY KEY, 
    AccountID INT NOT NULL,                      
    TransactionType VARCHAR(20) NOT NULL,       
    Amount DECIMAL(15, 2) NOT NULL,             
    TransactionDate DATE NOT NULL, 
	ReceiverID INT,
              
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID) ON DELETE CASCADE
);

-- 4. Loans Table
CREATE TABLE Loans (
    LoanID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID BIGINT,
    LoanType VARCHAR(20),
    Amount DECIMAL(15, 2),
    InterestRate DECIMAL(5, 2),
    LoanDate DATE,
    DueDate DATE,
    Status VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)ON DELETE CASCADE
);

-- 5. Payments Table
CREATE TABLE Payments (
    PaymentID INT AUTO_INCREMENT PRIMARY KEY,   -- PaymentID 
    LoanID INT,
    Amount DECIMAL(15, 2),
    PaymentDate DATE,
    PaymentMethod VARCHAR(20),
    FOREIGN KEY (LoanID) REFERENCES Loans(LoanID) ON DELETE CASCADE
);

-- 6. Employees Table
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Position VARCHAR(50),
    Salary DECIMAL(15, 2),
    HireDate DATE,
    BranchID INT,
    FOREIGN KEY (BranchID) REFERENCES Branches(BranchID)
);



-- 7. Account_Cards Table
CREATE TABLE Account_Cards (
    CardID INT AUTO_INCREMENT PRIMARY KEY, -- Auto-increment CardID
    AccountID INT NOT NULL,
    CardType VARCHAR(20) NOT NULL,
    CardNumber CHAR(16) UNIQUE NOT NULL,  -- Fixed-length for CardNumber
    ExpiryDate DATE NOT NULL,
    CVV INT NOT NULL,
    PIN CHAR(4) NOT NULL,
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID) ON DELETE CASCADE -- Foreign key constraint
);

-- 8. Branches Table
CREATE TABLE Branches (
    BranchID INT PRIMARY KEY,
    BranchName VARCHAR(50),
    Location VARCHAR(100),
    Phone VARCHAR(15)
);

-- 9. Customer_Queries Table
CREATE TABLE Customer_Queries (
    QueryID INT  AUTO_INCREMENT PRIMARY KEY,
    CustomerID BIGINT,
    EmployeeID INT,
    QueryDate DATE,
    QueryType VARCHAR(50),
    Description TEXT,
    Status VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);






CREATE TABLE EmployeeAudit (
    AuditID INT AUTO_INCREMENT PRIMARY KEY, -- Unique identifier for each audit record
    EmployeeID INT NOT NULL,                -- ID of the employee being audited
    FirstName VARCHAR(50),                  -- First name of the employee
    LastName VARCHAR(50),                   -- Last name of the employee
    Position VARCHAR(50),                   -- Job position of the employee
    Salary DECIMAL(10, 2),                  -- Salary of the employee
    BranchID INT,                           -- Branch ID where the employee works
    Action VARCHAR(20) NOT NULL,            -- Type of action (e.g., INSERT, UPDATE, DELETE)
    ChangedBy VARCHAR(50) NOT NULL,         -- User or system making the change
    ChangedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp of the change
);


-- Create TransactionAudit Table
CREATE TABLE TransactionAudit (
    AuditID INT AUTO_INCREMENT PRIMARY KEY,   -- Unique identifier for each audit entry
    TransactionID INT NOT NULL,               -- ID of the transaction being audited
    AccountID INT NOT NULL,                   -- Account ID associated with the transaction
    TransactionType VARCHAR(20) NOT NULL,     -- Type of transaction (e.g., 'Credit', 'Debit')
    Amount DECIMAL(10, 2) NOT NULL,           -- Amount involved in the transaction
    TransactionDate DATETIME NOT NULL,        -- Date and time of the transaction
    Action VARCHAR(20) NOT NULL,              -- Type of action (e.g., INSERT, UPDATE, DELETE)
    ChangedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp of the audit entry
);




//trigger

-- Create the trigger to insert audit record after transaction insertion 
DELIMITER $$ 
CREATE TRIGGER after_transaction_insert 
AFTER INSERT ON Transactions 
FOR EACH ROW 
BEGIN 
INSERT INTO TransactionAudit (TransactionID, AccountID, TransactionType, Amount, TransactionDate, 
Action) 
VALUES (NEW.TransactionID, NEW.AccountID, NEW.TransactionType, NEW.Amount, 
NEW.TransactionDate, 'INSERT'); 
END $$ 
DELIMITER ; 

DELIMITER $$ 
CREATE TRIGGER after_employee_insert 
AFTER INSERT ON Employees 
FOR EACH ROW 
BEGIN 
INSERT INTO EmployeeAudit (EmployeeID, FirstName, LastName, Position, Salary, BranchID, Action, 
ChangedBy) 
VALUES (NEW.EmployeeID, NEW.FirstName, NEW.LastName, NEW.Position, NEW.Salary, 
NEW.BranchID, 'CREATE', 'SYSTEM'); 
END $$ 
DELIMITER ; 


DELIMITER $$ 
CREATE TRIGGER after_employee_update 
AFTER UPDATE ON Employees 
FOR EACH ROW 
BEGIN 
INSERT INTO EmployeeAudit (EmployeeID, FirstName, LastName, Position, Salary, BranchID, Action, 
ChangedBy) 
VALUES (NEW.EmployeeID, NEW.FirstName, NEW.LastName, NEW.Position, NEW.Salary, 
NEW.BranchID, 'UPDATE', 'SYSTEM'); 
END $$ 
DELIMITER ; 



DELIMITER $$ 
CREATE TRIGGER after_employee_delete 
AFTER DELETE ON Employees 
FOR EACH ROW 
BEGIN 
INSERT INTO EmployeeAudit (EmployeeID, FirstName, LastName, Position, Salary, BranchID, Action, 
ChangedBy) 
VALUES (OLD.EmployeeID, OLD.FirstName, OLD.LastName, OLD.Position, OLD.Salary, OLD.BranchID, 
'DELETE', 'SYSTEM'); 
END $$ 
DELIMITER ;




INSERT INTO Admin (Username, Password, EmployeeID)
VALUES ('arsalan', 'arsalan123', 4614);

INSERT INTO Admin (Username, Password, EmployeeID)
VALUES ('sadaan', 'sadaan123', 4196);

INSERT INTO Admin (Username, Password, EmployeeID)
VALUES ('qasim', 'qasim123', 4380);



INSERT INTO Employees (EmployeeID, FirstName, LastName, Position, Salary, HireDate, BranchID)
VALUES (4614, 'Arsalan', '-', 'Administrator', 60000.00, '2024-01-15', 1);

INSERT INTO Employees (EmployeeID, FirstName, LastName, Position, Salary, HireDate, BranchID)
VALUES (4196, 'Sadaan', 'Qureshi', 'Administrator', 55000.00, '2024-02-20', 1);

INSERT INTO Employees (EmployeeID, FirstName, LastName, Position, Salary, HireDate, BranchID)
VALUES (4380, 'Qasim', 'Naveed', 'Administrator', 52000.00, '2024-03-10', 1);


INSERT INTO Branches (BranchID, BranchName, Location, Phone)
VALUES (1, 'Main Branch', '123 Main Street, City Center', '123-456-7890');



